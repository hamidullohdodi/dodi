// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: tweet/tweet.proto

package tweet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tweet Messages
type ReTweetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Hashtag   string `protobuf:"bytes,3,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Title     string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ImageUrl  string `protobuf:"bytes,6,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	TweetId   string `protobuf:"bytes,7,opt,name=tweet_id,json=tweetId,proto3" json:"tweet_id,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt string `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *ReTweetRes) Reset() {
	*x = ReTweetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReTweetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReTweetRes) ProtoMessage() {}

func (x *ReTweetRes) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReTweetRes.ProtoReflect.Descriptor instead.
func (*ReTweetRes) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{0}
}

func (x *ReTweetRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReTweetRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReTweetRes) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *ReTweetRes) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReTweetRes) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReTweetRes) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ReTweetRes) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *ReTweetRes) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ReTweetRes) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ReTweetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Hashtag   string `protobuf:"bytes,3,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Title     string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ImageUrl  string `protobuf:"bytes,6,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	CreatedAt string `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LikeCount int64  `protobuf:"varint,8,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	TweetId   string `protobuf:"bytes,9,opt,name=tweet_id,json=tweetId,proto3" json:"tweet_id,omitempty"`
}

func (x *ReTweetReq) Reset() {
	*x = ReTweetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReTweetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReTweetReq) ProtoMessage() {}

func (x *ReTweetReq) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReTweetReq.ProtoReflect.Descriptor instead.
func (*ReTweetReq) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{1}
}

func (x *ReTweetReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReTweetReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReTweetReq) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *ReTweetReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ReTweetReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReTweetReq) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ReTweetReq) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ReTweetReq) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *ReTweetReq) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

type Tweet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Hashtag   string `protobuf:"bytes,3,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Title     string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ImageUrl  string `protobuf:"bytes,6,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	CreatedAt string `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LikeCount int64  `protobuf:"varint,8,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
}

func (x *Tweet) Reset() {
	*x = Tweet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tweet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweet) ProtoMessage() {}

func (x *Tweet) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweet.ProtoReflect.Descriptor instead.
func (*Tweet) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{2}
}

func (x *Tweet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tweet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Tweet) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *Tweet) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tweet) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Tweet) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Tweet) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Tweet) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

type TweetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Hashtag   string `protobuf:"bytes,3,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Title     string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ImageUrl  string `protobuf:"bytes,6,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	LikeCount string `protobuf:"bytes,10,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	CreatedAt string `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt string `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *TweetResponse) Reset() {
	*x = TweetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetResponse) ProtoMessage() {}

func (x *TweetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetResponse.ProtoReflect.Descriptor instead.
func (*TweetResponse) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{3}
}

func (x *TweetResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TweetResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TweetResponse) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *TweetResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TweetResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TweetResponse) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *TweetResponse) GetLikeCount() string {
	if x != nil {
		return x.LikeCount
	}
	return ""
}

func (x *TweetResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TweetResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type UpdateATweet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hashtag string `protobuf:"bytes,2,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Title   string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UpdateATweet) Reset() {
	*x = UpdateATweet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateATweet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateATweet) ProtoMessage() {}

func (x *UpdateATweet) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateATweet.ProtoReflect.Descriptor instead.
func (*UpdateATweet) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateATweet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateATweet) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *UpdateATweet) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateATweet) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TweetId string `protobuf:"bytes,1,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Url) Reset() {
	*x = Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{5}
}

func (x *Url) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *Url) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{6}
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserId) Reset() {
	*x = UserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{7}
}

func (x *UserId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Tweets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tweets []*TweetResponse `protobuf:"bytes,1,rep,name=tweets,proto3" json:"tweets,omitempty"`
	Limit  int64            `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64            `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Tweets) Reset() {
	*x = Tweets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tweets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweets) ProtoMessage() {}

func (x *Tweets) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweets.ProtoReflect.Descriptor instead.
func (*Tweets) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{8}
}

func (x *Tweets) GetTweets() []*TweetResponse {
	if x != nil {
		return x.Tweets
	}
	return nil
}

func (x *Tweets) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Tweets) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type TweetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TweetId) Reset() {
	*x = TweetId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetId) ProtoMessage() {}

func (x *TweetId) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetId.ProtoReflect.Descriptor instead.
func (*TweetId) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{9}
}

func (x *TweetId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TweetFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Hashtag string `protobuf:"bytes,3,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	Title   string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *TweetFilter) Reset() {
	*x = TweetFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetFilter) ProtoMessage() {}

func (x *TweetFilter) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetFilter.ProtoReflect.Descriptor instead.
func (*TweetFilter) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{10}
}

func (x *TweetFilter) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TweetFilter) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TweetFilter) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

func (x *TweetFilter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Follow Messages
type FollowReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowerId  string `protobuf:"bytes,1,opt,name=followerId,proto3" json:"followerId,omitempty"`
	FollowingId string `protobuf:"bytes,2,opt,name=followingId,proto3" json:"followingId,omitempty"`
}

func (x *FollowReq) Reset() {
	*x = FollowReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowReq) ProtoMessage() {}

func (x *FollowReq) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowReq.ProtoReflect.Descriptor instead.
func (*FollowReq) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{11}
}

func (x *FollowReq) GetFollowerId() string {
	if x != nil {
		return x.FollowerId
	}
	return ""
}

func (x *FollowReq) GetFollowingId() string {
	if x != nil {
		return x.FollowingId
	}
	return ""
}

type FollowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowerId  string `protobuf:"bytes,1,opt,name=followerId,proto3" json:"followerId,omitempty"`
	FollowingId string `protobuf:"bytes,2,opt,name=followingId,proto3" json:"followingId,omitempty"`
	FollowedAt  string `protobuf:"bytes,3,opt,name=followedAt,proto3" json:"followedAt,omitempty"`
}

func (x *FollowRes) Reset() {
	*x = FollowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowRes) ProtoMessage() {}

func (x *FollowRes) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowRes.ProtoReflect.Descriptor instead.
func (*FollowRes) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{12}
}

func (x *FollowRes) GetFollowerId() string {
	if x != nil {
		return x.FollowerId
	}
	return ""
}

func (x *FollowRes) GetFollowingId() string {
	if x != nil {
		return x.FollowingId
	}
	return ""
}

func (x *FollowRes) GetFollowedAt() string {
	if x != nil {
		return x.FollowedAt
	}
	return ""
}

type DFollowRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowerId   string `protobuf:"bytes,1,opt,name=followerId,proto3" json:"followerId,omitempty"`
	FollowingId  string `protobuf:"bytes,2,opt,name=followingId,proto3" json:"followingId,omitempty"`
	UnfollowedAt string `protobuf:"bytes,3,opt,name=unfollowedAt,proto3" json:"unfollowedAt,omitempty"`
}

func (x *DFollowRes) Reset() {
	*x = DFollowRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DFollowRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DFollowRes) ProtoMessage() {}

func (x *DFollowRes) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DFollowRes.ProtoReflect.Descriptor instead.
func (*DFollowRes) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{13}
}

func (x *DFollowRes) GetFollowerId() string {
	if x != nil {
		return x.FollowerId
	}
	return ""
}

func (x *DFollowRes) GetFollowingId() string {
	if x != nil {
		return x.FollowingId
	}
	return ""
}

func (x *DFollowRes) GetUnfollowedAt() string {
	if x != nil {
		return x.UnfollowedAt
	}
	return ""
}

type Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Count) Reset() {
	*x = Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Count) ProtoMessage() {}

func (x *Count) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Count.ProtoReflect.Descriptor instead.
func (*Count) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{14}
}

func (x *Count) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{15}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	FirstName      string `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Bio            string `protobuf:"bytes,4,opt,name=bio,proto3" json:"bio,omitempty"`
	ProfileImage   string `protobuf:"bytes,5,opt,name=profileImage,proto3" json:"profileImage,omitempty"`
	FollowersCount int32  `protobuf:"varint,6,opt,name=followersCount,proto3" json:"followersCount,omitempty"`
	FollowingCount int32  `protobuf:"varint,7,opt,name=followingCount,proto3" json:"followingCount,omitempty"`
	PostsCount     int32  `protobuf:"varint,8,opt,name=postsCount,proto3" json:"postsCount,omitempty"`
	CreatedAt      string `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt      string `protobuf:"bytes,10,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{16}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetProfileImage() string {
	if x != nil {
		return x.ProfileImage
	}
	return ""
}

func (x *User) GetFollowersCount() int32 {
	if x != nil {
		return x.FollowersCount
	}
	return 0
}

func (x *User) GetFollowingCount() int32 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *User) GetPostsCount() int32 {
	if x != nil {
		return x.PostsCount
	}
	return 0
}

func (x *User) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *User) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Like Messages
type LikeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TweetId string `protobuf:"bytes,2,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
}

func (x *LikeReq) Reset() {
	*x = LikeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeReq) ProtoMessage() {}

func (x *LikeReq) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeReq.ProtoReflect.Descriptor instead.
func (*LikeReq) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{17}
}

func (x *LikeReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LikeReq) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

type LikeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TweetId string `protobuf:"bytes,2,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
	LikedAt string `protobuf:"bytes,3,opt,name=likedAt,proto3" json:"likedAt,omitempty"`
}

func (x *LikeRes) Reset() {
	*x = LikeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeRes) ProtoMessage() {}

func (x *LikeRes) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeRes.ProtoReflect.Descriptor instead.
func (*LikeRes) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{18}
}

func (x *LikeRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LikeRes) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *LikeRes) GetLikedAt() string {
	if x != nil {
		return x.LikedAt
	}
	return ""
}

type DLikeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TweetId   string `protobuf:"bytes,2,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
	UnlikedAt string `protobuf:"bytes,3,opt,name=unlikedAt,proto3" json:"unlikedAt,omitempty"`
}

func (x *DLikeRes) Reset() {
	*x = DLikeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLikeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLikeRes) ProtoMessage() {}

func (x *DLikeRes) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLikeRes.ProtoReflect.Descriptor instead.
func (*DLikeRes) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{19}
}

func (x *DLikeRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DLikeRes) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *DLikeRes) GetUnlikedAt() string {
	if x != nil {
		return x.UnlikedAt
	}
	return ""
}

type TweetTitles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Titles []string `protobuf:"bytes,1,rep,name=titles,proto3" json:"titles,omitempty"`
}

func (x *TweetTitles) Reset() {
	*x = TweetTitles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetTitles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetTitles) ProtoMessage() {}

func (x *TweetTitles) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetTitles.ProtoReflect.Descriptor instead.
func (*TweetTitles) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{20}
}

func (x *TweetTitles) GetTitles() []string {
	if x != nil {
		return x.Titles
	}
	return nil
}

// Comment Messages
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TweetId   string `protobuf:"bytes,3,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	LikeCount int64  `protobuf:"varint,5,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{21}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Comment) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

type CommentRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	TweetId   string `protobuf:"bytes,3,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	LikeCount int64  `protobuf:"varint,5,opt,name=likeCount,proto3" json:"likeCount,omitempty"`
	CreatedAt string `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt string `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CommentRes) Reset() {
	*x = CommentRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentRes) ProtoMessage() {}

func (x *CommentRes) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentRes.ProtoReflect.Descriptor instead.
func (*CommentRes) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{22}
}

func (x *CommentRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommentRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommentRes) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *CommentRes) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentRes) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *CommentRes) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CommentRes) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type UpdateAComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UpdateAComment) Reset() {
	*x = UpdateAComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAComment) ProtoMessage() {}

func (x *UpdateAComment) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAComment.ProtoReflect.Descriptor instead.
func (*UpdateAComment) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateAComment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CommentId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommentId) Reset() {
	*x = CommentId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentId) ProtoMessage() {}

func (x *CommentId) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentId.ProtoReflect.Descriptor instead.
func (*CommentId) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{24}
}

func (x *CommentId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TweetId string `protobuf:"bytes,2,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
}

func (x *CommentFilter) Reset() {
	*x = CommentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentFilter) ProtoMessage() {}

func (x *CommentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentFilter.ProtoReflect.Descriptor instead.
func (*CommentFilter) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{25}
}

func (x *CommentFilter) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommentFilter) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

type Comments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*CommentRes `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *Comments) Reset() {
	*x = Comments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comments) ProtoMessage() {}

func (x *Comments) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comments.ProtoReflect.Descriptor instead.
func (*Comments) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{26}
}

func (x *Comments) GetComments() []*CommentRes {
	if x != nil {
		return x.Comments
	}
	return nil
}

type CommentLikeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId string `protobuf:"bytes,1,opt,name=commentId,proto3" json:"commentId,omitempty"`
}

func (x *CommentLikeReq) Reset() {
	*x = CommentLikeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tweet_tweet_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentLikeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentLikeReq) ProtoMessage() {}

func (x *CommentLikeReq) ProtoReflect() protoreflect.Message {
	mi := &file_tweet_tweet_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentLikeReq.ProtoReflect.Descriptor instead.
func (*CommentLikeReq) Descriptor() ([]byte, []int) {
	return file_tweet_tweet_proto_rawDescGZIP(), []int{27}
}

func (x *CommentLikeReq) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

var File_tweet_tweet_proto protoreflect.FileDescriptor

var file_tweet_tweet_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x77, 0x65, 0x65, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf1,
	0x01, 0x0a, 0x0a, 0x52, 0x65, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x05, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x0d, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x68, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x03, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x23,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x18, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x64, 0x0a,
	0x06, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x19, 0x0a, 0x07, 0x54, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b,
	0x0a, 0x0b, 0x54, 0x77, 0x65, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x68, 0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x09, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x09, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x22, 0x72, 0x0a, 0x0a, 0x44, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x22, 0x1d, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x06, 0x0a, 0x04,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x3b, 0x0a, 0x07, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x22, 0x55,
	0x0a, 0x07, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x69, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x6b, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5a, 0x0a, 0x08, 0x44, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x65,
	0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x25, 0x0a, 0x0b, 0x54, 0x77, 0x65, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xc2, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x3a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x1b, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x39, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0xe2, 0x0a, 0x0a, 0x0c,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x09,
	0x50, 0x6f, 0x73, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x0c, 0x2e, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x1a, 0x14, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x0a, 0x2e, 0x74, 0x77, 0x65,
	0x65, 0x74, 0x2e, 0x55, 0x72, 0x6c, 0x1a, 0x0e, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x0e,
	0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x14,
	0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x73, 0x12, 0x12, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x74, 0x77, 0x65,
	0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x52, 0x65, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x12, 0x11, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x55, 0x6e, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x10, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x44,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x0d, 0x2e,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x0d, 0x2e, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x74, 0x77,
	0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0f, 0x4d, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x0b, 0x2e, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x6b,
	0x65, 0x12, 0x0e, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x0e, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12,
	0x0e, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x0f, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x12, 0x0d, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x12, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0f, 0x4d, 0x6f, 0x73, 0x74, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x0b, 0x2e, 0x74, 0x77, 0x65,
	0x65, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x14, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x0b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x74,
	0x77, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x15, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x74, 0x77,
	0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x0e, 0x2e,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x74, 0x77,
	0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x0e, 0x2e,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x14, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x4c, 0x69, 0x6b, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x0e, 0x2e, 0x74, 0x77, 0x65, 0x65, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x10, 0x5a, 0x0e, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x77, 0x65,
	0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tweet_tweet_proto_rawDescOnce sync.Once
	file_tweet_tweet_proto_rawDescData = file_tweet_tweet_proto_rawDesc
)

func file_tweet_tweet_proto_rawDescGZIP() []byte {
	file_tweet_tweet_proto_rawDescOnce.Do(func() {
		file_tweet_tweet_proto_rawDescData = protoimpl.X.CompressGZIP(file_tweet_tweet_proto_rawDescData)
	})
	return file_tweet_tweet_proto_rawDescData
}

var file_tweet_tweet_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_tweet_tweet_proto_goTypes = []any{
	(*ReTweetRes)(nil),     // 0: tweet.ReTweetRes
	(*ReTweetReq)(nil),     // 1: tweet.ReTweetReq
	(*Tweet)(nil),          // 2: tweet.Tweet
	(*TweetResponse)(nil),  // 3: tweet.TweetResponse
	(*UpdateATweet)(nil),   // 4: tweet.UpdateATweet
	(*Url)(nil),            // 5: tweet.Url
	(*Message)(nil),        // 6: tweet.Message
	(*UserId)(nil),         // 7: tweet.UserId
	(*Tweets)(nil),         // 8: tweet.Tweets
	(*TweetId)(nil),        // 9: tweet.TweetId
	(*TweetFilter)(nil),    // 10: tweet.TweetFilter
	(*FollowReq)(nil),      // 11: tweet.FollowReq
	(*FollowRes)(nil),      // 12: tweet.FollowRes
	(*DFollowRes)(nil),     // 13: tweet.DFollowRes
	(*Count)(nil),          // 14: tweet.Count
	(*Void)(nil),           // 15: tweet.Void
	(*User)(nil),           // 16: tweet.User
	(*LikeReq)(nil),        // 17: tweet.LikeReq
	(*LikeRes)(nil),        // 18: tweet.LikeRes
	(*DLikeRes)(nil),       // 19: tweet.DLikeRes
	(*TweetTitles)(nil),    // 20: tweet.TweetTitles
	(*Comment)(nil),        // 21: tweet.Comment
	(*CommentRes)(nil),     // 22: tweet.CommentRes
	(*UpdateAComment)(nil), // 23: tweet.UpdateAComment
	(*CommentId)(nil),      // 24: tweet.CommentId
	(*CommentFilter)(nil),  // 25: tweet.CommentFilter
	(*Comments)(nil),       // 26: tweet.Comments
	(*CommentLikeReq)(nil), // 27: tweet.CommentLikeReq
}
var file_tweet_tweet_proto_depIdxs = []int32{
	3,  // 0: tweet.Tweets.tweets:type_name -> tweet.TweetResponse
	22, // 1: tweet.Comments.comments:type_name -> tweet.CommentRes
	2,  // 2: tweet.TweetService.PostTweet:input_type -> tweet.Tweet
	4,  // 3: tweet.TweetService.UpdateTweet:input_type -> tweet.UpdateATweet
	5,  // 4: tweet.TweetService.AddImageToTweet:input_type -> tweet.Url
	7,  // 5: tweet.TweetService.UserTweets:input_type -> tweet.UserId
	9,  // 6: tweet.TweetService.GetTweet:input_type -> tweet.TweetId
	10, // 7: tweet.TweetService.GetAllTweets:input_type -> tweet.TweetFilter
	7,  // 8: tweet.TweetService.RecommendTweets:input_type -> tweet.UserId
	7,  // 9: tweet.TweetService.GetNewTweets:input_type -> tweet.UserId
	1,  // 10: tweet.TweetService.ReTweet:input_type -> tweet.ReTweetReq
	11, // 11: tweet.TweetService.Follow:input_type -> tweet.FollowReq
	11, // 12: tweet.TweetService.Unfollow:input_type -> tweet.FollowReq
	7,  // 13: tweet.TweetService.GetUserFollowers:input_type -> tweet.UserId
	7,  // 14: tweet.TweetService.GetUserFollows:input_type -> tweet.UserId
	15, // 15: tweet.TweetService.MostPopularUser:input_type -> tweet.Void
	17, // 16: tweet.TweetService.AddLike:input_type -> tweet.LikeReq
	17, // 17: tweet.TweetService.DeleteLike:input_type -> tweet.LikeReq
	7,  // 18: tweet.TweetService.GetUserLikes:input_type -> tweet.UserId
	9,  // 19: tweet.TweetService.GetCountTweetLikes:input_type -> tweet.TweetId
	15, // 20: tweet.TweetService.MostLikedTweets:input_type -> tweet.Void
	21, // 21: tweet.TweetService.PostComment:input_type -> tweet.Comment
	23, // 22: tweet.TweetService.UpdateComment:input_type -> tweet.UpdateAComment
	24, // 23: tweet.TweetService.DeleteComment:input_type -> tweet.CommentId
	24, // 24: tweet.TweetService.GetComment:input_type -> tweet.CommentId
	25, // 25: tweet.TweetService.GetAllComments:input_type -> tweet.CommentFilter
	7,  // 26: tweet.TweetService.GetUserComments:input_type -> tweet.UserId
	27, // 27: tweet.TweetService.AddLikeToComment:input_type -> tweet.CommentLikeReq
	27, // 28: tweet.TweetService.DeleteLikeComment:input_type -> tweet.CommentLikeReq
	3,  // 29: tweet.TweetService.PostTweet:output_type -> tweet.TweetResponse
	3,  // 30: tweet.TweetService.UpdateTweet:output_type -> tweet.TweetResponse
	6,  // 31: tweet.TweetService.AddImageToTweet:output_type -> tweet.Message
	8,  // 32: tweet.TweetService.UserTweets:output_type -> tweet.Tweets
	3,  // 33: tweet.TweetService.GetTweet:output_type -> tweet.TweetResponse
	8,  // 34: tweet.TweetService.GetAllTweets:output_type -> tweet.Tweets
	8,  // 35: tweet.TweetService.RecommendTweets:output_type -> tweet.Tweets
	8,  // 36: tweet.TweetService.GetNewTweets:output_type -> tweet.Tweets
	3,  // 37: tweet.TweetService.ReTweet:output_type -> tweet.TweetResponse
	12, // 38: tweet.TweetService.Follow:output_type -> tweet.FollowRes
	13, // 39: tweet.TweetService.Unfollow:output_type -> tweet.DFollowRes
	14, // 40: tweet.TweetService.GetUserFollowers:output_type -> tweet.Count
	14, // 41: tweet.TweetService.GetUserFollows:output_type -> tweet.Count
	16, // 42: tweet.TweetService.MostPopularUser:output_type -> tweet.User
	18, // 43: tweet.TweetService.AddLike:output_type -> tweet.LikeRes
	19, // 44: tweet.TweetService.DeleteLike:output_type -> tweet.DLikeRes
	20, // 45: tweet.TweetService.GetUserLikes:output_type -> tweet.TweetTitles
	14, // 46: tweet.TweetService.GetCountTweetLikes:output_type -> tweet.Count
	3,  // 47: tweet.TweetService.MostLikedTweets:output_type -> tweet.TweetResponse
	22, // 48: tweet.TweetService.PostComment:output_type -> tweet.CommentRes
	22, // 49: tweet.TweetService.UpdateComment:output_type -> tweet.CommentRes
	6,  // 50: tweet.TweetService.DeleteComment:output_type -> tweet.Message
	21, // 51: tweet.TweetService.GetComment:output_type -> tweet.Comment
	26, // 52: tweet.TweetService.GetAllComments:output_type -> tweet.Comments
	26, // 53: tweet.TweetService.GetUserComments:output_type -> tweet.Comments
	6,  // 54: tweet.TweetService.AddLikeToComment:output_type -> tweet.Message
	6,  // 55: tweet.TweetService.DeleteLikeComment:output_type -> tweet.Message
	29, // [29:56] is the sub-list for method output_type
	2,  // [2:29] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_tweet_tweet_proto_init() }
func file_tweet_tweet_proto_init() {
	if File_tweet_tweet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tweet_tweet_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ReTweetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ReTweetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Tweet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TweetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateATweet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Tweets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TweetId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TweetFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FollowReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FollowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DFollowRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*LikeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LikeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DLikeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*TweetTitles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CommentRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateAComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CommentId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CommentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*Comments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tweet_tweet_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CommentLikeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tweet_tweet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tweet_tweet_proto_goTypes,
		DependencyIndexes: file_tweet_tweet_proto_depIdxs,
		MessageInfos:      file_tweet_tweet_proto_msgTypes,
	}.Build()
	File_tweet_tweet_proto = out.File
	file_tweet_tweet_proto_rawDesc = nil
	file_tweet_tweet_proto_goTypes = nil
	file_tweet_tweet_proto_depIdxs = nil
}
