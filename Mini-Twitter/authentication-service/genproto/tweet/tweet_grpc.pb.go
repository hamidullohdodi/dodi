// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tweet/tweet.proto

package tweet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TweetServiceClient is the client API for TweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TweetServiceClient interface {
	// Tweets
	PostTweet(ctx context.Context, in *Tweet, opts ...grpc.CallOption) (*TweetResponse, error)
	UpdateTweet(ctx context.Context, in *UpdateATweet, opts ...grpc.CallOption) (*TweetResponse, error)
	AddImageToTweet(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Message, error)
	UserTweets(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Tweets, error)
	GetTweet(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*TweetResponse, error)
	GetAllTweets(ctx context.Context, in *TweetFilter, opts ...grpc.CallOption) (*Tweets, error)
	RecommendTweets(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Tweets, error)
	GetNewTweets(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Tweets, error)
	// Subscribe
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowRes, error)
	Unfollow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*DFollowRes, error)
	GetUserFollowers(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Count, error)
	GetUserFollows(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Count, error)
	MostPopularUser(ctx context.Context, in *Void, opts ...grpc.CallOption) (*User, error)
	// Likes
	AddLike(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeRes, error)
	DeleteLike(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*DLikeRes, error)
	GetUserLikes(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*TweetTitles, error)
	GetCountTweetLikes(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*Count, error)
	MostLikedTweets(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Tweet, error)
	// Comments
	PostComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*CommentRes, error)
	UpdateComment(ctx context.Context, in *UpdateAComment, opts ...grpc.CallOption) (*CommentRes, error)
	DeleteComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Message, error)
	GetComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Comment, error)
	GetAllComments(ctx context.Context, in *CommentFilter, opts ...grpc.CallOption) (*Comments, error)
	GetUserComments(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Comments, error)
	AddLikeToComment(ctx context.Context, in *CommentLikeReq, opts ...grpc.CallOption) (*Message, error)
	DeleteLikeComment(ctx context.Context, in *CommentLikeReq, opts ...grpc.CallOption) (*Message, error)
}

type tweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetServiceClient(cc grpc.ClientConnInterface) TweetServiceClient {
	return &tweetServiceClient{cc}
}

func (c *tweetServiceClient) PostTweet(ctx context.Context, in *Tweet, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/PostTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) UpdateTweet(ctx context.Context, in *UpdateATweet, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/UpdateTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) AddImageToTweet(ctx context.Context, in *Url, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/AddImageToTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) UserTweets(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Tweets, error) {
	out := new(Tweets)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/UserTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetTweet(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetAllTweets(ctx context.Context, in *TweetFilter, opts ...grpc.CallOption) (*Tweets, error) {
	out := new(Tweets)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetAllTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) RecommendTweets(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Tweets, error) {
	out := new(Tweets)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/RecommendTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetNewTweets(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Tweets, error) {
	out := new(Tweets)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetNewTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*FollowRes, error) {
	out := new(FollowRes)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) Unfollow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*DFollowRes, error) {
	out := new(DFollowRes)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/Unfollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetUserFollowers(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetUserFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetUserFollows(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetUserFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) MostPopularUser(ctx context.Context, in *Void, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/MostPopularUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) AddLike(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeRes, error) {
	out := new(LikeRes)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/AddLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) DeleteLike(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*DLikeRes, error) {
	out := new(DLikeRes)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/DeleteLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetUserLikes(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*TweetTitles, error) {
	out := new(TweetTitles)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetUserLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetCountTweetLikes(ctx context.Context, in *TweetId, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetCountTweetLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) MostLikedTweets(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Tweet, error) {
	out := new(Tweet)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/MostLikedTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) PostComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*CommentRes, error) {
	out := new(CommentRes)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/PostComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) UpdateComment(ctx context.Context, in *UpdateAComment, opts ...grpc.CallOption) (*CommentRes, error) {
	out := new(CommentRes)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) DeleteComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetAllComments(ctx context.Context, in *CommentFilter, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetAllComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetUserComments(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Comments, error) {
	out := new(Comments)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetUserComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) AddLikeToComment(ctx context.Context, in *CommentLikeReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/AddLikeToComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) DeleteLikeComment(ctx context.Context, in *CommentLikeReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/DeleteLikeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TweetServiceServer is the server API for TweetService service.
// All implementations must embed UnimplementedTweetServiceServer
// for forward compatibility
type TweetServiceServer interface {
	// Tweets
	PostTweet(context.Context, *Tweet) (*TweetResponse, error)
	UpdateTweet(context.Context, *UpdateATweet) (*TweetResponse, error)
	AddImageToTweet(context.Context, *Url) (*Message, error)
	UserTweets(context.Context, *UserId) (*Tweets, error)
	GetTweet(context.Context, *TweetId) (*TweetResponse, error)
	GetAllTweets(context.Context, *TweetFilter) (*Tweets, error)
	RecommendTweets(context.Context, *UserId) (*Tweets, error)
	GetNewTweets(context.Context, *UserId) (*Tweets, error)
	// Subscribe
	Follow(context.Context, *FollowReq) (*FollowRes, error)
	Unfollow(context.Context, *FollowReq) (*DFollowRes, error)
	GetUserFollowers(context.Context, *UserId) (*Count, error)
	GetUserFollows(context.Context, *UserId) (*Count, error)
	MostPopularUser(context.Context, *Void) (*User, error)
	// Likes
	AddLike(context.Context, *LikeReq) (*LikeRes, error)
	DeleteLike(context.Context, *LikeReq) (*DLikeRes, error)
	GetUserLikes(context.Context, *UserId) (*TweetTitles, error)
	GetCountTweetLikes(context.Context, *TweetId) (*Count, error)
	MostLikedTweets(context.Context, *Void) (*Tweet, error)
	// Comments
	PostComment(context.Context, *Comment) (*CommentRes, error)
	UpdateComment(context.Context, *UpdateAComment) (*CommentRes, error)
	DeleteComment(context.Context, *CommentId) (*Message, error)
	GetComment(context.Context, *CommentId) (*Comment, error)
	GetAllComments(context.Context, *CommentFilter) (*Comments, error)
	GetUserComments(context.Context, *UserId) (*Comments, error)
	AddLikeToComment(context.Context, *CommentLikeReq) (*Message, error)
	DeleteLikeComment(context.Context, *CommentLikeReq) (*Message, error)
	mustEmbedUnimplementedTweetServiceServer()
}

// UnimplementedTweetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTweetServiceServer struct {
}

func (UnimplementedTweetServiceServer) PostTweet(context.Context, *Tweet) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTweet not implemented")
}
func (UnimplementedTweetServiceServer) UpdateTweet(context.Context, *UpdateATweet) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTweet not implemented")
}
func (UnimplementedTweetServiceServer) AddImageToTweet(context.Context, *Url) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImageToTweet not implemented")
}
func (UnimplementedTweetServiceServer) UserTweets(context.Context, *UserId) (*Tweets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserTweets not implemented")
}
func (UnimplementedTweetServiceServer) GetTweet(context.Context, *TweetId) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweet not implemented")
}
func (UnimplementedTweetServiceServer) GetAllTweets(context.Context, *TweetFilter) (*Tweets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTweets not implemented")
}
func (UnimplementedTweetServiceServer) RecommendTweets(context.Context, *UserId) (*Tweets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendTweets not implemented")
}
func (UnimplementedTweetServiceServer) GetNewTweets(context.Context, *UserId) (*Tweets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewTweets not implemented")
}
func (UnimplementedTweetServiceServer) Follow(context.Context, *FollowReq) (*FollowRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedTweetServiceServer) Unfollow(context.Context, *FollowReq) (*DFollowRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedTweetServiceServer) GetUserFollowers(context.Context, *UserId) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollowers not implemented")
}
func (UnimplementedTweetServiceServer) GetUserFollows(context.Context, *UserId) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollows not implemented")
}
func (UnimplementedTweetServiceServer) MostPopularUser(context.Context, *Void) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MostPopularUser not implemented")
}
func (UnimplementedTweetServiceServer) AddLike(context.Context, *LikeReq) (*LikeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedTweetServiceServer) DeleteLike(context.Context, *LikeReq) (*DLikeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedTweetServiceServer) GetUserLikes(context.Context, *UserId) (*TweetTitles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLikes not implemented")
}
func (UnimplementedTweetServiceServer) GetCountTweetLikes(context.Context, *TweetId) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountTweetLikes not implemented")
}
func (UnimplementedTweetServiceServer) MostLikedTweets(context.Context, *Void) (*Tweet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MostLikedTweets not implemented")
}
func (UnimplementedTweetServiceServer) PostComment(context.Context, *Comment) (*CommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (UnimplementedTweetServiceServer) UpdateComment(context.Context, *UpdateAComment) (*CommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedTweetServiceServer) DeleteComment(context.Context, *CommentId) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedTweetServiceServer) GetComment(context.Context, *CommentId) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedTweetServiceServer) GetAllComments(context.Context, *CommentFilter) (*Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllComments not implemented")
}
func (UnimplementedTweetServiceServer) GetUserComments(context.Context, *UserId) (*Comments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserComments not implemented")
}
func (UnimplementedTweetServiceServer) AddLikeToComment(context.Context, *CommentLikeReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLikeToComment not implemented")
}
func (UnimplementedTweetServiceServer) DeleteLikeComment(context.Context, *CommentLikeReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLikeComment not implemented")
}
func (UnimplementedTweetServiceServer) mustEmbedUnimplementedTweetServiceServer() {}

// UnsafeTweetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TweetServiceServer will
// result in compilation errors.
type UnsafeTweetServiceServer interface {
	mustEmbedUnimplementedTweetServiceServer()
}

func RegisterTweetServiceServer(s grpc.ServiceRegistrar, srv TweetServiceServer) {
	s.RegisterService(&TweetService_ServiceDesc, srv)
}

func _TweetService_PostTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).PostTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/PostTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).PostTweet(ctx, req.(*Tweet))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_UpdateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateATweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).UpdateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/UpdateTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).UpdateTweet(ctx, req.(*UpdateATweet))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_AddImageToTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Url)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).AddImageToTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/AddImageToTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).AddImageToTweet(ctx, req.(*Url))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_UserTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).UserTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/UserTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).UserTweets(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetTweet(ctx, req.(*TweetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetAllTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetAllTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetAllTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetAllTweets(ctx, req.(*TweetFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_RecommendTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).RecommendTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/RecommendTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).RecommendTweets(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetNewTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetNewTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetNewTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetNewTweets(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/Unfollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).Unfollow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetUserFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetUserFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetUserFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetUserFollowers(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetUserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetUserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetUserFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetUserFollows(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_MostPopularUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).MostPopularUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/MostPopularUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).MostPopularUser(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/AddLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).AddLike(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/DeleteLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).DeleteLike(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetUserLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetUserLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetUserLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetUserLikes(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetCountTweetLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetCountTweetLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetCountTweetLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetCountTweetLikes(ctx, req.(*TweetId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_MostLikedTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).MostLikedTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/MostLikedTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).MostLikedTweets(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/PostComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).PostComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).UpdateComment(ctx, req.(*UpdateAComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).DeleteComment(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetComment(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetAllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetAllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetAllComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetAllComments(ctx, req.(*CommentFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetUserComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetUserComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetUserComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetUserComments(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_AddLikeToComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).AddLikeToComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/AddLikeToComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).AddLikeToComment(ctx, req.(*CommentLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_DeleteLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).DeleteLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/DeleteLikeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).DeleteLikeComment(ctx, req.(*CommentLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TweetService_ServiceDesc is the grpc.ServiceDesc for TweetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TweetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tweet.TweetService",
	HandlerType: (*TweetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTweet",
			Handler:    _TweetService_PostTweet_Handler,
		},
		{
			MethodName: "UpdateTweet",
			Handler:    _TweetService_UpdateTweet_Handler,
		},
		{
			MethodName: "AddImageToTweet",
			Handler:    _TweetService_AddImageToTweet_Handler,
		},
		{
			MethodName: "UserTweets",
			Handler:    _TweetService_UserTweets_Handler,
		},
		{
			MethodName: "GetTweet",
			Handler:    _TweetService_GetTweet_Handler,
		},
		{
			MethodName: "GetAllTweets",
			Handler:    _TweetService_GetAllTweets_Handler,
		},
		{
			MethodName: "RecommendTweets",
			Handler:    _TweetService_RecommendTweets_Handler,
		},
		{
			MethodName: "GetNewTweets",
			Handler:    _TweetService_GetNewTweets_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _TweetService_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _TweetService_Unfollow_Handler,
		},
		{
			MethodName: "GetUserFollowers",
			Handler:    _TweetService_GetUserFollowers_Handler,
		},
		{
			MethodName: "GetUserFollows",
			Handler:    _TweetService_GetUserFollows_Handler,
		},
		{
			MethodName: "MostPopularUser",
			Handler:    _TweetService_MostPopularUser_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _TweetService_AddLike_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _TweetService_DeleteLike_Handler,
		},
		{
			MethodName: "GetUserLikes",
			Handler:    _TweetService_GetUserLikes_Handler,
		},
		{
			MethodName: "GetCountTweetLikes",
			Handler:    _TweetService_GetCountTweetLikes_Handler,
		},
		{
			MethodName: "MostLikedTweets",
			Handler:    _TweetService_MostLikedTweets_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _TweetService_PostComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _TweetService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _TweetService_DeleteComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _TweetService_GetComment_Handler,
		},
		{
			MethodName: "GetAllComments",
			Handler:    _TweetService_GetAllComments_Handler,
		},
		{
			MethodName: "GetUserComments",
			Handler:    _TweetService_GetUserComments_Handler,
		},
		{
			MethodName: "AddLikeToComment",
			Handler:    _TweetService_AddLikeToComment_Handler,
		},
		{
			MethodName: "DeleteLikeComment",
			Handler:    _TweetService_DeleteLikeComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tweet/tweet.proto",
}
