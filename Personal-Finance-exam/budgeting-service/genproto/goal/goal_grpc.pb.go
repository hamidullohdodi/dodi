// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/goal.proto

package goal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoalService_CreateGoal_FullMethodName            = "/goal.GoalService/CreateGoal"
	GoalService_GetGoal_FullMethodName               = "/goal.GoalService/GetGoal"
	GoalService_UpdateGoal_FullMethodName            = "/goal.GoalService/UpdateGoal"
	GoalService_DeleteGoal_FullMethodName            = "/goal.GoalService/DeleteGoal"
	GoalService_ListGoals_FullMethodName             = "/goal.GoalService/ListGoals"
	GoalService_GetUserSpending_FullMethodName       = "/goal.GoalService/GetUserSpending"
	GoalService_GetUserIncome_FullMethodName         = "/goal.GoalService/GetUserIncome"
	GoalService_GetGoalReportProgress_FullMethodName = "/goal.GoalService/GetGoalReportProgress"
	GoalService_GetBudgetSummary_FullMethodName      = "/goal.GoalService/GetBudgetSummary"
)

// GoalServiceClient is the client API for GoalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoalServiceClient interface {
	CreateGoal(ctx context.Context, in *CreateGoalReq, opts ...grpc.CallOption) (*GoalResp, error)
	GetGoal(ctx context.Context, in *GetGoalReq, opts ...grpc.CallOption) (*GoalResp, error)
	UpdateGoal(ctx context.Context, in *UpdateGoalReq, opts ...grpc.CallOption) (*GoalResp, error)
	DeleteGoal(ctx context.Context, in *DeleteGoalReq, opts ...grpc.CallOption) (*Void3, error)
	ListGoals(ctx context.Context, in *ListGoalsReq, opts ...grpc.CallOption) (*ListGoalsResp, error)
	GetUserSpending(ctx context.Context, in *GetUserMoneyRequest, opts ...grpc.CallOption) (*GetUserMoneyResponse, error)
	GetUserIncome(ctx context.Context, in *GetUserMoneyRequest, opts ...grpc.CallOption) (*GetUserMoneyResponse, error)
	GetGoalReportProgress(ctx context.Context, in *GoalProgressRequest, opts ...grpc.CallOption) (*GoalProgressResponse, error)
	GetBudgetSummary(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*GetUserBudgetResponse, error)
}

type goalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoalServiceClient(cc grpc.ClientConnInterface) GoalServiceClient {
	return &goalServiceClient{cc}
}

func (c *goalServiceClient) CreateGoal(ctx context.Context, in *CreateGoalReq, opts ...grpc.CallOption) (*GoalResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalResp)
	err := c.cc.Invoke(ctx, GoalService_CreateGoal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) GetGoal(ctx context.Context, in *GetGoalReq, opts ...grpc.CallOption) (*GoalResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalResp)
	err := c.cc.Invoke(ctx, GoalService_GetGoal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) UpdateGoal(ctx context.Context, in *UpdateGoalReq, opts ...grpc.CallOption) (*GoalResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalResp)
	err := c.cc.Invoke(ctx, GoalService_UpdateGoal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) DeleteGoal(ctx context.Context, in *DeleteGoalReq, opts ...grpc.CallOption) (*Void3, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void3)
	err := c.cc.Invoke(ctx, GoalService_DeleteGoal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) ListGoals(ctx context.Context, in *ListGoalsReq, opts ...grpc.CallOption) (*ListGoalsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGoalsResp)
	err := c.cc.Invoke(ctx, GoalService_ListGoals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) GetUserSpending(ctx context.Context, in *GetUserMoneyRequest, opts ...grpc.CallOption) (*GetUserMoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserMoneyResponse)
	err := c.cc.Invoke(ctx, GoalService_GetUserSpending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) GetUserIncome(ctx context.Context, in *GetUserMoneyRequest, opts ...grpc.CallOption) (*GetUserMoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserMoneyResponse)
	err := c.cc.Invoke(ctx, GoalService_GetUserIncome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) GetGoalReportProgress(ctx context.Context, in *GoalProgressRequest, opts ...grpc.CallOption) (*GoalProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoalProgressResponse)
	err := c.cc.Invoke(ctx, GoalService_GetGoalReportProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalServiceClient) GetBudgetSummary(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*GetUserBudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBudgetResponse)
	err := c.cc.Invoke(ctx, GoalService_GetBudgetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoalServiceServer is the server API for GoalService service.
// All implementations must embed UnimplementedGoalServiceServer
// for forward compatibility.
type GoalServiceServer interface {
	CreateGoal(context.Context, *CreateGoalReq) (*GoalResp, error)
	GetGoal(context.Context, *GetGoalReq) (*GoalResp, error)
	UpdateGoal(context.Context, *UpdateGoalReq) (*GoalResp, error)
	DeleteGoal(context.Context, *DeleteGoalReq) (*Void3, error)
	ListGoals(context.Context, *ListGoalsReq) (*ListGoalsResp, error)
	GetUserSpending(context.Context, *GetUserMoneyRequest) (*GetUserMoneyResponse, error)
	GetUserIncome(context.Context, *GetUserMoneyRequest) (*GetUserMoneyResponse, error)
	GetGoalReportProgress(context.Context, *GoalProgressRequest) (*GoalProgressResponse, error)
	GetBudgetSummary(context.Context, *UserId) (*GetUserBudgetResponse, error)
	mustEmbedUnimplementedGoalServiceServer()
}

// UnimplementedGoalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoalServiceServer struct{}

func (UnimplementedGoalServiceServer) CreateGoal(context.Context, *CreateGoalReq) (*GoalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoal not implemented")
}
func (UnimplementedGoalServiceServer) GetGoal(context.Context, *GetGoalReq) (*GoalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoal not implemented")
}
func (UnimplementedGoalServiceServer) UpdateGoal(context.Context, *UpdateGoalReq) (*GoalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoal not implemented")
}
func (UnimplementedGoalServiceServer) DeleteGoal(context.Context, *DeleteGoalReq) (*Void3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoal not implemented")
}
func (UnimplementedGoalServiceServer) ListGoals(context.Context, *ListGoalsReq) (*ListGoalsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoals not implemented")
}
func (UnimplementedGoalServiceServer) GetUserSpending(context.Context, *GetUserMoneyRequest) (*GetUserMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSpending not implemented")
}
func (UnimplementedGoalServiceServer) GetUserIncome(context.Context, *GetUserMoneyRequest) (*GetUserMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIncome not implemented")
}
func (UnimplementedGoalServiceServer) GetGoalReportProgress(context.Context, *GoalProgressRequest) (*GoalProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoalReportProgress not implemented")
}
func (UnimplementedGoalServiceServer) GetBudgetSummary(context.Context, *UserId) (*GetUserBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudgetSummary not implemented")
}
func (UnimplementedGoalServiceServer) mustEmbedUnimplementedGoalServiceServer() {}
func (UnimplementedGoalServiceServer) testEmbeddedByValue()                     {}

// UnsafeGoalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoalServiceServer will
// result in compilation errors.
type UnsafeGoalServiceServer interface {
	mustEmbedUnimplementedGoalServiceServer()
}

func RegisterGoalServiceServer(s grpc.ServiceRegistrar, srv GoalServiceServer) {
	// If the following call pancis, it indicates UnimplementedGoalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoalService_ServiceDesc, srv)
}

func _GoalService_CreateGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).CreateGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_CreateGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).CreateGoal(ctx, req.(*CreateGoalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_GetGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).GetGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_GetGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).GetGoal(ctx, req.(*GetGoalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_UpdateGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).UpdateGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_UpdateGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).UpdateGoal(ctx, req.(*UpdateGoalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_DeleteGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).DeleteGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_DeleteGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).DeleteGoal(ctx, req.(*DeleteGoalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_ListGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoalsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).ListGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_ListGoals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).ListGoals(ctx, req.(*ListGoalsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_GetUserSpending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).GetUserSpending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_GetUserSpending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).GetUserSpending(ctx, req.(*GetUserMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_GetUserIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).GetUserIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_GetUserIncome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).GetUserIncome(ctx, req.(*GetUserMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_GetGoalReportProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).GetGoalReportProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_GetGoalReportProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).GetGoalReportProgress(ctx, req.(*GoalProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalService_GetBudgetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServiceServer).GetBudgetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoalService_GetBudgetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServiceServer).GetBudgetSummary(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// GoalService_ServiceDesc is the grpc.ServiceDesc for GoalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goal.GoalService",
	HandlerType: (*GoalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGoal",
			Handler:    _GoalService_CreateGoal_Handler,
		},
		{
			MethodName: "GetGoal",
			Handler:    _GoalService_GetGoal_Handler,
		},
		{
			MethodName: "UpdateGoal",
			Handler:    _GoalService_UpdateGoal_Handler,
		},
		{
			MethodName: "DeleteGoal",
			Handler:    _GoalService_DeleteGoal_Handler,
		},
		{
			MethodName: "ListGoals",
			Handler:    _GoalService_ListGoals_Handler,
		},
		{
			MethodName: "GetUserSpending",
			Handler:    _GoalService_GetUserSpending_Handler,
		},
		{
			MethodName: "GetUserIncome",
			Handler:    _GoalService_GetUserIncome_Handler,
		},
		{
			MethodName: "GetGoalReportProgress",
			Handler:    _GoalService_GetGoalReportProgress_Handler,
		},
		{
			MethodName: "GetBudgetSummary",
			Handler:    _GoalService_GetBudgetSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/goal.proto",
}
