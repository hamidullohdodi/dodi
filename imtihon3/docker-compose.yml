services:
  api_gateway:
    container_name: apigateway
    build:
      context: ./Api_gatawey
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    environment:
      - HTTP_PORT=:8080
      - AUTH_SERVICE_PORT=:8083
      - PRODUCTS_SERVICE_PORT=:8082
      - SIGNING_KEY=GARD
    depends_on:
      postgresdbs:
        condition: service_started
    networks:
      - mynetwork

  auth_service:
    container_name: authservice
    build:
      context: ./authService
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
      - "8083:8083"
    environment:
      - DB_HOST=postgresdbs
      - DB_USER=postgres
      - DB_NAME=auth
      - DB_PASSWORD=dodi
      - DB_PORT=5432
    depends_on:
      postgresdbs:
        condition: service_started
    networks:
      - mynetwork

  migrate:
    image: migrate/migrate
    networks:
      - mynetwork
    volumes:
      - ./authService/migrations:/migrations
    command: [ "-path", "/migrations","-database", "postgres://postgres:dodi@postgresdbs:5432/auth?sslmode=disable","up" ]
    depends_on:
      postgresdbs:
        condition: service_healthy

  product_server:
    container_name: productserver
    build:
      context: ./ProductServer
      dockerfile: Dockerfile
    ports:
      - "8082:8082"

  postgresdbs:
    container_name: postgresdb1
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dodi
      PGDATA: /var/lib/postgresql/data
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - mynetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  mynetwork:
    driver: bridge

volumes:
  db-data:
